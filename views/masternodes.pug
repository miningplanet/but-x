extends layout

block content
  include ./includes/common.pug
  script.
    const itemsPerPage = parseInt("#{masternodes_page.masternode_table.items_per_page}")
    const lengthMenuOpts = !{JSON.stringify(masternodes_page.masternode_table.page_length_options)}
    function secondsToHms(d) {
        d = Number(d)
        var h = Math.floor(d / 3600)
        var m = Math.floor(d % 3600 / 60)
        var s = Math.floor(d % 3600 % 60)
        var dy = Math.floor(h / 24)
        var h = h % 24
        return ('0' + dy).slice(-2) + " day" + (('0' + dy).slice(-2) == 1 ? "" : "s") + " " + ('0' + h).slice(-2) + "h " + ('0' + m).slice(-2) + "m " + ('0' + s).slice(-2) + "s"
    }
    $(document).ready(function() {
      var labels = !{JSON.stringify(settings.labels)}
      var ctable = $('#masternodes-table').dataTable({
        autoWidth: true,
        searching: true,
        ordering: true,
        order: [[ 4, 'desc' ]],
        responsive: true,
        lengthChange: true,
        processing: true,
        iDisplayLength: itemsPerPage,
        lengthMenu: lengthMenuOpts,
        scrollX: true,
        language: {
          paginate: {
            previous: '<',
            next: '>'
          }
        },
        ajax: {
          url: '/ext/getmasternodelist/#{net}',
          dataSrc: function(json) {
            for (i = 0; i < json.length; i++) {
              const addr = json[i]['addr']
              const status = json[i]['status']
              const pose = json[i]['pose_score']
              const ipAddr = json[i]['ip_address']

              json[i]['address'] = "<a href='/address/" + json[i]['address'] + ("#{net}" != null ? "/#{net}" : "") + "'>" + json[i]['address'] + "</a>"
              json[i]['lastseen'] = '<span' + (#{shared_pages.date_time.enable_alt_timezone_tooltips} == true ? ' data-bs-toggle="tooltip" data-bs-placement="auto" title="' + format_unixtime(json[i]['lastseen'], true) + '"' : '') + '>' + format_unixtime(json[i]['lastseen']) + '</span>'

              // strip port from IPv4
              if (!ipAddr.startsWith('[') && ipAddr.indexOf(":") > -1) {
                json[i]['ip_address'] = '<span>' + ipAddr + '</span>'
                json[i]['ip_address_without_port'] = '<span>' + ipAddr.substring(0, ipAddr.indexOf(":")) + '</span>'
              }

              // strip brackets and port from IPv6, and shorten it.
              if (ipAddr.startsWith('[')) {
                json[i]['ip_address'] = '<span>[' + ipAddr.substring(1, ipAddr.indexOf(']')).substring(0, 16) + '..]</span>'
                json[i]['ip_address_without_port'] = json[i]['ip_address']
              }

              const lastPaid = json[i]['lastpaid']
              const lastPaidBlock = json[i]['last_paid_block']
              if (!isNaN(lastPaid)) {
                json[i]['lastpaid'] = format_unixtime(lastPaid)
                json[i]['last_paid_block'] = '<span title="' + format_unixtime_blank(lastPaid) + '">' + lastPaidBlock + '</span>'
              } else {
                json[i]['lastpaid'] = '<em>N/A</em>'
                json[i]['last_paid_block'] = '<span>' + lastPaidBlock + '</span>'
              }
              
              if (json[i]['activetime'])
                json[i]['activetime'] = secondsToHms(json[i]['activetime'])
              else
                json[i]['activetime'] = '<em>N/A</em>'

              json[i]['addr'] = "<a href='/address/" + json[i]['addr'] + ("#{net}" != null ? "/#{net}" : "") + "' title='" + json[i]['addr'] + "'>" + json[i]['addr'] + ('#{claim_address_page.enabled}' == 'true' && json[i]['claim_name'] != null && json[i]['claim_name'] != '' ? ' <span class="small fw-normal">(' + json[i]['claim_name'] + ')</span>' : '') + "</a>"

              if (labels[addr] != null && labels[addr].enabled == true) {
                if (labels[addr].type)
                  json[i]['addr'] = '<div><label class="badge bg-' + labels[addr].type + '" style="margin-bottom:10px;">' + labels[addr].label + (labels[addr].url ? '<a href="' + labels[addr].url + '" target="_blank", alt="Visit site", title="Visit site" data-bs-toggle="tooltip" data-bs-placement="top"><span class="fa fa-question-circle" style="margin-left:5px"></span></a>' : '') + '</label></div>' + json[i]['addr']
                else
                  json[i]['addr'] = '<div><label class="badge bg-default" style="margin-bottom:10px;">' + labels[addr].label + (labels[addr].url ? '<a href="' + labels[addr].url + '" target="_blank", alt="Visit site", title="Visit site" data-bs-toggle="tooltip" data-bs-placement="top"><span class="fa fa-question-circle" style="margin-left:5px"></span></a>' : '') + '</label></div>' + json[i]['addr']
              }

              var entity="&#9888;"
              if (status) {
                if (status == "ENABLED") {
                  entity="&#10004;"
                }
              }

              json[i]['pose_score'] = '<span>' + pose + '</span>'

              json[i]['status'] = '<span class="entitybig"><b>' + entity + '</b></span>'

              const country = "<span>" + json[i]['country'] + "</span>"
              if (json[i]['country_code'] && json[i]['country_code'].length > 1) {
                json[i]['countryWithFlag'] = country + '<div class="margin-left-5 flag-icon flag-icon-'+json[i]['country_code'].toLowerCase()+'"></div>'
                json[i]['flag'] = '<div title="' + json[i]['country'] + '" class="margin-left-5 flag-icon flag-icon-'+json[i]['country_code'].toLowerCase()+'"></div>'
              } else {
                json[i]['countryWithFlag'] = '<div></div>'
                json[i]['flag'] = '<div></div>'
              }
            } 
            return json
          }
        },
        columns: [
          { name: 'ip_address_port', data: 'ip_address', className: "ipandportcol wide" },
          { name: 'ip_address', data: 'ip_address_without_port', className: "ipcol small" },
          { name: 'addr', data: 'addr', className: "addresscol full" },
          { name: 'lastpaid', data: 'lastpaid', className: "lastpaidcol full" },
          { name: 'last_paid_block', data: 'last_paid_block', className: "lastpaidblockcol" },
          { name: 'status', data: 'status', className: "statuscol" },
          { name: 'pose', data: 'pose_score', className: "posecol" },
          { name: 'country', data: 'countryWithFlag', className: "countrywithnamecol wide" },
          { name: 'flag', data: 'flag', className: "flagcol small" }
        ],
        rowCallback: function(row, data, index) {
        },
        fnDrawCallback: function(settings) {
          enableTooltips()
        },
        fnInitComplete: function(settings, json) {
          setTimeout(function () {
            // Hide/show columns.
            // ctable.api().column('rank:name').visible(<true|false>, false)
          }, 0)
        }
      })

      if ('#{masternodes_page.page_header.show_last_updated}' == 'true') {
        var lastUpdatedDate = #{(last_updated == null || last_updated == '0' ? 0 : last_updated)}

        if (lastUpdatedDate != 0) {
          $('span#lastUpdatedDate').html(' ' + format_unixtime(lastUpdatedDate))

          if (#{shared_pages.date_time.enable_alt_timezone_tooltips} == true) {
            $('span#lastUpdatedDate').attr('data-bs-toggle', 'tooltip').attr('data-bs-placement', 'auto').attr('title', format_unixtime(lastUpdatedDate, true))
            enableTooltips()
          }
        } else
          $('span#lastUpdatedDate').html(' N/A')
      }
    })
  .col-md-12.cardSpacer
    if settings.anyHeader(masternodes_page, net)
      #page-header-container(style='align-items:' + (settings.allHeaders(masternodes_page, net) == true ? 'flex-start' : 'center'))
        if masternodes_page.page_header.show_img == true
          #header-img-container
            img#header-img(src=page_title_logo)
        #page-title-container
          if masternodes_page.page_header.show_title == true
            h3#page-title #{settings.locale.mn_title.replace('{1}', coin.name)}
          if masternodes_page.page_header.show_last_updated == true
            if masternodes_page.page_header.show_title != true && masternodes_page.page_header.show_description != true
              #page-title-container
                .sub-page-header
                  span=settings.locale.last_updated + ':'
                  span.text-muted#lastUpdatedDate
            else
              .sub-page-header(style='margin-bottom:' + (masternodes_page.page_header.show_description == true ? '5' : '0') + 'px')
                span=settings.locale.last_updated + ':'
                span.text-muted#lastUpdatedDate
          if masternodes_page.page_header.show_description == true
            if masternodes_page.page_header.show_title != true && masternodes_page.page_header.show_last_updated != true
              #page-title-container
                .sub-page-header.text-muted=settings.locale.mn_description.replace('{1}', coin.name)
            else
              .sub-page-header.text-muted=settings.locale.mn_description.replace('{1}', coin.name)
      .cardSpacer.clearfix
    .card.card-default.border-0.cardSpacer
      .card-header
        strong Masternode List
      table#masternodes-table.table.table-bordered.table-striped.table-paging.table-hover.mobile-border-right
        thead
          tr
            th.text-center(class="wide") IP:port
            th.text-center(class="small") IP
            th.text-center(class="full") Payout
            th.text-center(class="full") Last payed
            th.text-center Last
            th.text-center State
            th.text-center PoS
            th.text-center(class="wide") Country
            th.text-center(class="small") C
        tbody.text-center