doctype html
html(lang='en')
  - const markets_page = settings.get(net, 'markets_page')
  - const index_page = settings.get(net, 'index_page')
  - const info_page = settings.get(net, 'info_page')
  - const block_page = settings.get(net, 'block_page')
  - const transaction_page = settings.get(net, 'transaction_page')
  - const address_page = settings.get(net, 'address_page')
  - const masternodes_page = settings.get(net, 'masternodes_page')
  - const movement_page = settings.get(net, 'movement_page')
  - const network_page = settings.get(net, 'network_page')
  - const richlist_page = settings.get(net, 'richlist_page')
  - const api_page = settings.get(net, 'api_page')
  - const claim_address_page = settings.get(net, 'claim_address_page')
  - const assets_page = settings.get(net, 'assets_page')
  - const asset_page = settings.get(net, 'asset_page')
  - const registration_page = settings.get(net, 'registration_page')
  - const login_page = settings.get(net, 'login_page')
  - const user_page = settings.get(net, 'user_page')
  - const error_page = settings.get(net, 'error_page')
  - const network_history = settings.get(net, 'network_history')
  - const isMultiAlgo = settings.isMultiAlgo(net)
  - const isPepew = settings.isPepew(net)
  - const isVkax = settings.isVkax(net)
  - const search_enabled = shared_pages.page_header.search.enabled
  - const nethash_enabled = shared_pages.page_header.network_charts.nethash_chart.enabled
  - const difficulty_enabled = shared_pages.page_header.network_charts.difficulty_chart.enabled
  - const home_url = settings.get(net, 'home_url')
  - const home_title = settings.get(net, 'home_title')
  - const logo_title = settings.getWallet(net).logo_title
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1')
    meta(http-equiv='Content-Language', content='en')
    meta(name='title', content=shared_pages.page_title)
    meta(name='description', content=shared_pages.page_description)
    meta(name='tags', content=shared_pages.page_tags)
    title=(page_title_prefix == null || page_title_prefix == '' ? settings.locale.error_title.replace('{1}', coin.name) : page_title_prefix) + ' - ' + shared_pages.page_title
    if shared_pages.favicons.favicon32 != ''
      link(rel='icon', href='/' + shared_pages.favicons.favicon32, sizes='32x32')
    if shared_pages.favicons.favicon128 != ''
      link(rel='icon', href='/' + shared_pages.favicons.favicon128, sizes='128x128')
    if shared_pages.favicons.favicon180 != ''
      link(rel='icon', href='/' + shared_pages.favicons.favicon180, sizes='180x180')
    if shared_pages.favicons.favicon192 != ''
      link(rel='icon', href='/' + shared_pages.favicons.favicon192, sizes='192x192')
    link(rel='stylesheet', href='/css/themes/darkly/bootstrap.min.css' + (themeHash == null ? '' : '?h=' + themeHash))
    if active == 'markets' || active == 'richlist'
      link(rel='stylesheet', href='/css/jquery.jqplot.min.css')
    if active == 'network' || active == 'masternodes'
      link(rel='stylesheet', href='/css/flag-icons.min.css')
    link(rel='stylesheet', type='text/css', href='/css/datatables.min.css')
    link(rel='stylesheet', href='/css/OverlayScrollbars.min.css')
    link(rel='stylesheet', href='/css/style.min.css' + (styleHash == null ? '' : '?h=' + styleHash))
    link(rel='stylesheet', href='/css/' + shared_pages.theme + '.min.css' + (customHash == null ? '' : '?h=' + customHash))
    script(type='text/javascript', src='/js/jquery.min.js', integrity='sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==', crossorigin='anonymous', referrerpolicy='no-referrer')
    script(type='text/javascript', src='/js/bootstrap.bundle.min.js', integrity='sha512-X/YkDZyjTf4wyc2Vy16YGCPHwAY8rZJY+POgokZjQB2mhIRFJCckEGc6YyX9eNsPfn0PzThEuNs+uaomE5CO6A==', crossorigin='anonymous')
    script(type='text/javascript', src='/js/custom.js' integrity='sha512-msgKdlSc7RJ0hIfFKrOzeHxxHAIZBvAdxK8U8vzEj20iMLns5SaZjxWECaMb4hHq2Ww9NvBr8s2kZjsVqMHcRg==')
    if active == 'markets' || active == 'richlist'
      script(type='text/javascript', src='/js/jquery.jqplot.min.js' integrity='sha512-FQKKXM+/7s6LVHU07eH2zShZHunHqkBCIcDqodXfdV/NNXW165npscG8qOHdxVsOM4mJx38Ep1oMBcNXGB3BCw==')
    if active == 'markets'
      script(type='text/javascript', src='/js/jqPlot/1.0.9/plugins/jqplot.dateAxisRenderer.min.js' integrity='sha512-yJjgvCexVLrfcNiaB+R/82eXqsyGO4zAde3AWF1rGYPxBWFGLpNkVw5iFz/2DLyTPq7qcC2/Ujzzg/77I1OMJQ==')
      script(type='text/javascript', src='/js/jqPlot/1.0.9/plugins/jqplot.ohlcRenderer.min.js' integrity='sha512-8dFX06JuD6JKaQ6CFNwJRx7wvymy27G64Dz3NBBQD482d2RQCacBKyyow8LKrsT5N74zJ4/mly1ino+UZzMatQ==')
      script(type='text/javascript', src='/js/jqPlot/1.0.9/plugins/jqplot.highlighter.min.js' integrity='sha512-TR38mFALO4a3kHTCbtQIZvn0qtemTauEJx5rnuXQsHaRLAHyHEQdV+KVC81GZ6hgNqGNukESKnsrkQfTj6uUGg==')
    if active == 'richlist'
      script(type='text/javascript', src='/js/jqPlot/1.0.9/plugins/jqplot.pieRenderer.min.js' integrity='sha512-aTgJc5LAZwVJGYScGUq8unQx1qYLrqtrTBAVFaLQoJ00sFc3rPrgFbeQzO5POMW19QE+qqjF78tuPF7H/FtRTA==')
    script(type='text/javascript', src='/js/datatables.min.js', integrity="sha512-mAuTLdoRIkmfC5MdsTUHETx9e0hSoSI0hsM13Rq0g8s970UrjCiPStn8Ve3wLx8dyEXjhkEaIGYnwnNF8hQC+g==")
    script(type='text/javascript', src='/js/jquery.overlayScrollbars.min.js', integrity="sha512-PviP63d43OXLyLjCv3TawK1Rw4LQQsnH6yschHgK63LBvLpd1U1+7LM/OESlV/cSze5lFI3+f7JwKFEBEWNp1w==", crossorigin="anonymous", referrerpolicy="no-referrer")
    if active == 'reward' || (network_history.enabled == true && ((showNethashChart == true && nethash_enabled == true && shared_pages.show_hashrate == true) || (showDifficultyChart == true && difficulty_enabled == true)))
      script(type='text/javascript', src='/js/chart.min.js', integrity='sha512-O2fWHvFel3xjQSi9FyzKXWLTvnom+lOYR/AUEThL/fbP4hv1Lo5LCFCGuTXBRyKC4K4DJldg5kxptkgXAzUpvA==')
    if (network_history.enabled == true) && ((showNethashChart == true && nethash_enabled == true && shared_pages.show_hashrate == true) || (showDifficultyChart == true && difficulty_enabled == true))
      script(type='text/javascript', src='/js/chartjs-plugin-crosshair.min.js', integrity='sha512-ZDgEGMJIlOsUYz2GqE97O0IykmPJYB10Rf3ZTZBi2yqMoCkT/V6TA+avigqlIUEKng0rhKXZ7MqTIyV9F3JTDw==')
    - var sideBarClasses = ['bg-primary', 'navbar-dark'];
    script.
      var nethashChart;
      var difficultyChart;
      var sideMarketVisible = false;
      var topMenuExpanded = false;
      var sideBarClasses = '!{sideBarClasses}'.replace(/,/g, " ");
      function undefinedOrFalse(i) {
        return typeof i === 'undefined' || i == null || i == false;
      }
      function hashonlycpu() {
        const newState = undefinedOrFalse( nethashChart.data.datasets[0].hidden) || undefinedOrFalse( nethashChart.data.datasets[1].hidden);
        nethashChart.data.datasets[0].hidden = newState;
        nethashChart.data.datasets[1].hidden = newState;
        nethashChart.update();
      }
      function hashonlygpu() {
        const newState = undefinedOrFalse( nethashChart.data.datasets[2].hidden);
        nethashChart.data.datasets[2].hidden = newState;
        nethashChart.update();
      }
      function hashonlyasic() {
        const newState = undefinedOrFalse( nethashChart.data.datasets[3].hidden) || undefinedOrFalse( nethashChart.data.datasets[4].hidden) || undefinedOrFalse( nethashChart.data.datasets[5].hidden);
        nethashChart.data.datasets[3].hidden = newState;
        nethashChart.data.datasets[4].hidden = newState;
        nethashChart.data.datasets[5].hidden = newState;
        nethashChart.update();
      }
      function diffonlycpu() {
        const newState = undefinedOrFalse( difficultyChart.data.datasets[0].hidden) || undefinedOrFalse( difficultyChart.data.datasets[1].hidden);
        difficultyChart.data.datasets[0].hidden = newState;
        difficultyChart.data.datasets[1].hidden = newState;
        difficultyChart.update();
      }
      function diffonlygpu() {
        const newState = undefinedOrFalse( difficultyChart.data.datasets[2].hidden);
        difficultyChart.data.datasets[2].hidden = newState;
        difficultyChart.update();
      }
      function diffonlyasic() {
        const newState = undefinedOrFalse( difficultyChart.data.datasets[3].hidden) || undefinedOrFalse( difficultyChart.data.datasets[4].hidden) || undefinedOrFalse( difficultyChart.data.datasets[5].hidden);
        difficultyChart.data.datasets[3].hidden = newState;
        difficultyChart.data.datasets[4].hidden = newState;
        difficultyChart.data.datasets[5].hidden = newState;
        difficultyChart.update();
      }
      function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
      }
      function fixFooterHeightAndPosition() {
        var screenWidth = $(window).outerWidth();
      }
      function fixSidebarHeight() {
        if ('#{shared_pages.page_footer.sticky_footer}' != 'true')
          $('div#side-nav-bar').css('margin-bottom', -($('div#body-container > div#side-nav-bar').length ? ($('div#footer-container').offset().top - $('div#footer-container').position().top + 1) : 0).toString() + 'px');
        else if ($('div#footer-container').offset().top > ($('#main-container').position().top + $('#main-container').outerHeight(true)))
          $('div#side-nav-bar').css('margin-bottom', -($('div#body-container > div#side-nav-bar').length ? ($('div#footer-container').offset().top - ($('#main-container').position().top + $('#main-container').outerHeight(true)) + $('div#footer-container').outerHeight(true)) : 0).toString() + 'px');
        else
          $('div#side-nav-bar').css('margin-bottom', '');
      }
      function getSocialLinkHeight() {
        var retVal = 70;
        var screenWidth = $(window).outerWidth();

        if (screenWidth <= 575) {
          // Mobile
          retVal = !{shared_pages.page_footer.social_link_percent_height_mobile};
        } else if (screenWidth >= 576 && screenWidth <= 991) {
          // Tablet
          retVal = !{shared_pages.page_footer.social_link_percent_height_tablet};
        } else {
          // Desktop
          retVal = !{shared_pages.page_footer.social_link_percent_height_desktop};
        }

        return retVal;
      }
      function enableTooltips() {
        if ($().tooltip) {
          // Enable tooltips only if browser supports them
          // $('[data-bs-toggle="tooltip"]').tooltip();
        }
      }
      function rotateElement(elementSelector) {
        var element = $(elementSelector);

        if (element.length > 0) {
          $({ deg: 0 }).animate({ deg: 360 }, {
            duration: 2000,
            step: function(deg) {
              element.css({
                transform: 'rotateY(' + deg + 'deg)'
              });
            },
            done: function() {
              setTimeout(function() {
                rotateElement(elementSelector);
              }, 1500);
            }
          });
        }
      }
      function startRotateElement(elementSelector) {
        setTimeout(function() {
          rotateElement(elementSelector);
        }, 100);
      }
      function getNetHashUnits() {
        var networkSuffix='';
        switch ('#{shared_pages.page_header.panels.network_panel.nethash_units}') {
          case "K":
            networkSuffix='(KH/s)';
            break;
          case "M":
            networkSuffix='(MH/s)';
            break;
          case "G":
            networkSuffix='(GH/s)';
            break;
          case "T":
            networkSuffix='(TH/s)';
            break;
          case "P":
            networkSuffix='(PH/s)';
            break;
          case "H":
            networkSuffix='(H/s)';
            break;
        }
        return networkSuffix;
      }
      function fixTopMenuCollapse(isResizing) {
        if (topMenuExpanded && isResizing) {
          // force collapse the menu if it is open and the screen is being resized,
          // otherwise it could cause problems with the market dropdown after resizing back and forth between mobile and desktop sizes
          bootstrap.Collapse.getOrCreateInstance($('#navbar-collapse')).hide();
          topMenuExpanded = false;
        }

        if ($().tooltip)
          $('#navbar-toggler-span').tooltip('hide');

        if (topMenuExpanded) {
          $('#search-header-button').hide();
          $('#search-navbar-collapse').addClass('d-none');
          $('#navbar-collapse').css('max-height', ($(window).outerHeight() - ($('#main-header div.navbar-header').outerHeight()) - (#{shared_pages.page_footer.sticky_footer} == true ? $('div#footer-container').outerHeight(true) : 0) - 20).toString() + 'px');
        } else
          $('#navbar-collapse').css('max-height', 'none');
      }
      $(document).ready(function() {
        if ('#{active}' != '')
          $('##{active} > a.nav-link').addClass('active');
        function showTopPanelData(dataElement, loadingElement) {
          if ($('#' + loadingElement).length) {
            $('#' + loadingElement).fadeOut('slow', function() {
              $('#' + loadingElement).remove();
              $('#' + dataElement).fadeIn(20);
            });
          }
        }
        function update_stats() {
          var summary_headers = {
            Accept: 'application/json, text/javascript, */*; q=0.01'
          };
          //- if (#{showPanels} == false)
          //-   summary_headers['footer-only'] = 'true';

          $.ajax({url: '/ext/getsummary/#{net}', headers: summary_headers, success: function(json) {
            if (#{showPanels} == true) {
              if (json.masternodeCountOnline == null)
                json.masternodeCountOnline = '-';
              if (json.masternodeCountOffline == null)
                json.masternodeCountOffline = '-';

              var mnOnlineText = json.masternodeCountOnline+" node"+(json.masternodeCountOnline == 1 ? "" : "s")+" online";
              var mnOfflineText = json.masternodeCountOffline+" unreachable node"+(json.masternodeCountOffline == 1 ? "" : "s");

              $("#masternodeCountOnline").text(json.masternodeCountOnline).prop("alt", mnOnlineText).prop("title", mnOnlineText).attr("data-bs-original-title", mnOnlineText);
              $("#masternodeCountOffline").text(json.masternodeCountOffline).prop("alt", mnOfflineText).prop("title", mnOfflineText).attr("data-bs-original-title", mnOfflineText);
              $("#spnMasternodeCountOnline").prop("alt", mnOnlineText).prop("title", mnOnlineText).attr("data-bs-original-title", mnOnlineText);
              $("#spnMasternodeCountOffline").prop("alt", mnOfflineText).prop("title", mnOfflineText).attr("data-bs-original-title", mnOfflineText);
              showTopPanelData('masternodepanel', 'masternodePanelLoading');

              var supplyString = json.supply;
              var diffString = json.difficulty;
              var hashrateString = json.hashrate;
              var splitValue, splitParts;

              if (!isNaN(json.difficulty))
                diffString = Number(json.difficulty).toLocaleString('en',{'minimumFractionDigits':2,'maximumFractionDigits':8,'useGrouping':true});
              if (!isNaN(json.supply))
                supplyString = parseInt(parseFloat(json.supply).toFixed(0)).toLocaleString('en');
              if (!isNaN(json.hashrate))
                hashrateString = Number(json.hashrate).toLocaleString('en',{'minimumFractionDigits':2,'maximumFractionDigits':8,'useGrouping':true});

              $("#supply").text(supplyString);
              splitValue = Number(parseFloat(json.lastPrice).toFixed(8) * parseInt(parseFloat(json.supply).toFixed(0))).toLocaleString('en',{'minimumFractionDigits':2,'maximumFractionDigits':2,'useGrouping':true});
              splitParts = splitValue.split('.');
              showTopPanelData('supplypanel', 'supplyPanelLoading');

              $("#marketCap").html(splitParts[0] + '.<span class="decimal">' + splitParts[1] + '</span>');
              showTopPanelData('marketCapPanel', 'marketCapPanelLoading');

              splitParts = diffString.split('.');
              $("#difficulty").html(splitParts[0] + '.<span class="decimal">' + splitParts[1] + '</span>');

              if (json.difficultyHybrid == null || json.difficultyHybrid == '')
                $("#difficultyHybrid").html('-');
              else {
                splitParts = json.difficultyHybrid.split('.');
                $("#difficultyHybrid").html(splitParts[0] + '.<span class="decimal">' + splitParts[1] + '</span>');
              }

              showTopPanelData('difficultypanel', 'difficultyPanelLoading');

              if (hashrateString == null || hashrateString == '' || hashrateString == '-')
                $("#hashrate").html('-');
              else {
                splitParts = hashrateString.split('.');
                $("#hashrate").html(splitParts[0] + '.<span class="decimal">' + splitParts[1] + '</span>');
              }
              showTopPanelData('hashratepanel', 'hashratePanelLoading');

              splitValue = Number(json.lastPrice).toLocaleString('en',{'minimumFractionDigits':2,'maximumFractionDigits':8,'useGrouping':true});
              splitParts = splitValue.split('.');
              $("#lastPrice").html(splitParts[0] + '.<span class="decimal">' + splitParts[1] + '</span>');
              showTopPanelData('pricepanel', 'pricePanelLoading');
            }

            /* $("#lblConnections").text(json.connections + ' connections'); */
            $("#lblBlockcount").text(json.blockcount + ' blocks');
          }});
        }
        
        var countDecimals = function(value) {
          let text = value.toString();

          if (text.indexOf('e-') > -1) {
            let [base, trail] = text.split('e-');
            let deg = parseInt(trail, 10);
            return deg;
          } else if (Math.floor(value) !== value)
            return value.toString().split(".")[1].length || 0;
          else
            return 0;
        }
        function update_network_charts() {
          $.ajax({
            url: '/ext/getnetworkchartdata' + '/#{net}',
            success: function(result) {
              if (#{network_history.enabled} == true && #{showNethashChart} == true && #{nethash_enabled} == true && #{shared_pages.show_hashrate} == true) {
                const ctxNethash = document.getElementById('nethashChart').getContext('2d');

                if (nethashChart == null) {
                  const netHashSets = []
                  const algos = '#{shared_pages.page_header.network_charts.algos}'
                  const isMultiAlgo = '#{isMultiAlgo}'
                  const isPepew = '#{isPepew}'
                  const isVkax = '#{isVkax}'
                  if (algos.includes("ghostrider")) {
                    netHashSets.push({
                      label: 'Ghostrider',
                      data: result.map(function(a) {return a.nethash_ghostrider;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.ghostrider_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.ghostrider_line_color}'],
                      fill: 'start'
                    });
                  }
                  if (isMultiAlgo === 'true' && algos.includes("yespower")) {
                    netHashSets.push({
                      label: 'Yespower',
                      data: result.map(function(a) {return a.nethash_yespower / 1000;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.yespower_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.yespower_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("lyra2")) {
                    netHashSets.push({
                      label: 'Lyra2',
                      data: result.map(function(a) {return a.nethash_lyra2;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.lyra2_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.lyra2_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("sha256d")) {
                    netHashSets.push({
                      label: 'Sha256d',
                      data: result.map(function(a) {return a.nethash_sha256d / 1000;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.sha256d_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.sha256d_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("scrypt")) {
                    netHashSets.push({
                      label: 'Scrypt',
                      data: result.map(function(a) {return a.nethash_scrypt;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.scrypt_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.scrypt_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (algos.includes("memehash")) {
                    netHashSets.push({
                      label: 'MemeHash',
                      data: result.map(function(a) {return a.nethash_ghostrider;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.ghostrider_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.ghostrider_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (algos.includes("mike")) {
                    netHashSets.push({
                      label: 'Mike',
                      data: result.map(function(a) {return a.nethash_mike;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.nethash_chart.mike_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.nethash_chart.mike_line_color}'],
                      fill: 'start'
                    })
                  }

                  nethashChart = new Chart(ctxNethash, {
                    type: 'line',
                    data: {
                      labels: result.map(function(a) {return a.blockindex;}),
                      datasets: netHashSets
                    },
                    options: {
                      maintainAspectRatio: false,
                      elements: {
                        point: {
                          radius: 1
                        },
                        line: {
                          tension: 0.1
                        }
                      },
                      scales: {
                        y: {
                          ticks: {
                              callback: (val) => (val.toExponential(1))
                          }
                        }
                      },
                      plugins: {
                        legend: {
                          onClick: (e) => e.stopPropagation(),
                          display: true,
                          position: 'bottom',
                          labels: {
                            boxHeight: 12,
                            boxWidth: 12
                          }
                        },
                        title: {
                          display: false,
                          padding: 0
                        },
                        tooltip: {
                          mode: 'index',
                          intersect: false,
                          displayColors: true,
                          callbacks: {
                            title: function(context) {
                              return 'Block ' + context[0].label + ' Hashrate';
                            },
                            label: function(context) {
                              var val = #{shared_pages.page_header.network_charts.nethash_chart.round_decimals};
                              var max = 20;

                              if (val != -1)
                                max = val;
                              else {
                                let decimalCount = countDecimals(context.raw || 0);

                                if (decimalCount < max)
                                  max = decimalCount;
                              }

                              if (context.dataset.label == 'Ghostrider') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' KH/s';
                              } else if (context.dataset.label == 'Yespower') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' MH/s';
                              } else if (context.dataset.label == 'Lyra2') {
                                const n = Number((context.raw *1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' KH/s'
                              } if (context.dataset.label == 'Sha256d') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' MH/s'
                              } else if (context.dataset.label == 'Scrypt') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' KH/s'
                              } else if (context.dataset.label == 'MemeHash') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' KH/s'
                              } else if (context.dataset.label == 'Mike') {
                                const n = Number((context.raw * 1000 || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':0,'useGrouping':true});
                                return n + ' KH/s'
                              }
                            }
                          }
                        },
                        crosshair: {
                          line: {
                            color: '#{shared_pages.page_header.network_charts.nethash_chart.crosshair_color}',
                            width: 1
                          },
                          sync: {
                            enabled: false
                          },
                          zoom: {
                            enabled: false
                          }
                        }
                      }
                    }
                  });
                  $('#nethashChartParent').fadeIn(20);
                } else {
                  nethashChart.data.labels = result.map(function(a) {return a.blockindex;});
                  nethashChart.data.datasets[0].data = result.map(function(a) {return a.nethash;});
                  nethashChart.update();
                }
              }

              if (#{network_history.enabled} == true && #{showDifficultyChart} == true && #{difficulty_enabled} == true) {
                const ctxDifficulty = document.getElementById('difficultyChart').getContext('2d');

                var diffDataSets = [];
                var showPOW = false;
                var showPOS = false;

                for (var i = 0; i < result.length; i++) {
                  //- if (result[i].difficulty_pow != 0)
                  //-   showPOW = true;
                  if (result[i].difficulty_pos != 0)
                    showPOS = true;
                }

                const algos = '#{shared_pages.page_header.network_charts.algos}'
                const isMultiAlgo = '#{isMultiAlgo}'
                if (showPOS) {
                  if (algos.includes("ghostrider")) {
                    diffDataSets.push({
                      label: 'Ghostrider',
                      data: result.map(function(a) {return a.difficulty_ghostrider;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.ghostrider_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.ghostrider_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("yespower")) {
                    diffDataSets.push({
                      label: 'Yespower',
                      data: result.map(function(a) {return a.difficulty_yespower;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.yespower_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.yespower_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("lyra2")) {
                    diffDataSets.push({
                      label: 'Lyra2',
                      data: result.map(function(a) {return a.difficulty_lyra2;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.lyra2_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.lyra2_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("sha256d")) {
                    diffDataSets.push({
                      label: 'Sha256d',
                      data: result.map(function(a) {return a.difficulty_sha256d}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.sha256d_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.sha256d_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (isMultiAlgo === 'true' && algos.includes("scrypt")) {
                    diffDataSets.push({
                      label: 'Scrypt',
                      data: result.map(function(a) {return a.difficulty_scrypt;}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.scrypt_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.scrypt_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (algos.includes("memehash")) {
                    diffDataSets.push({
                      label: 'MemeHash',
                      data: result.map(function(a) {return a.difficulty_memehash}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.memehash_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.memehash_line_color}'],
                      fill: 'start'
                    })
                  }
                  if (algos.includes("mike")) {
                    diffDataSets.push({
                      label: 'Mike',
                      data: result.map(function(a) {return a.difficulty_mike}),
                      backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.mike_fill_color}'],
                      borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.mike_line_color}'],
                      fill: 'start'
                    })
                  }
                }

                if (showPOW || !showPOS) {
                  diffDataSets.push({
                    label: 'POW Difficulty',
                    data: result.map(function(a) {return a.difficulty_pow;}),
                    backgroundColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.pow_fill_color}'],
                    borderColor: ['#{shared_pages.page_header.network_charts.difficulty_chart.pow_line_color}'],
                    fill: 'start'
                  });
                }

                if (difficultyChart == null) {
                  difficultyChart = new Chart(ctxDifficulty, {
                    type: 'line',
                    data: {
                      labels: result.map(function(a) {return a.blockindex;}),
                      datasets: diffDataSets
                    },
                    options: {
                      maintainAspectRatio: false,
                      elements: {
                        point: {
                          radius: 1
                        },
                        line: {
                          tension: 0.1
                        }
                      },
                      scales: {
                        y: {
                          ticks: {
                              callback: (val) => (val.toExponential(1))
                          }
                        }
                      },
                      plugins: {
                        legend: {
                          onClick: (e) => e.stopPropagation(),
                          display: true,
                          position: 'bottom',
                          labels: {
                            boxHeight: 12,
                            boxWidth: 12
                          }
                        },
                        title: {
                          display: false
                        },
                        tooltip: {
                          mode: 'index',
                          intersect: false,
                          displayColors: true,
                          callbacks: {
                            title: function(context) {
                              return 'Block ' + context[0].label + ' Difficulty';
                            },
                            label: function(context) {
                              var val = #{shared_pages.page_header.network_charts.difficulty_chart.round_decimals};
                              var max = 20;

                              if (val != -1)
                                max = val;
                              else {
                                let decimalCount = countDecimals(context.raw || 0);

                                if (decimalCount < max)
                                  max = decimalCount;
                              }

                              return Number((context.raw || 0)).toLocaleString('en',{'minimumFractionDigits':0,'maximumFractionDigits':max,'useGrouping':true});
                            }
                          }
                        },
                        crosshair: {
                          line: {
                            color: '#{shared_pages.page_header.network_charts.difficulty_chart.crosshair_color}',
                            width: 1
                          },
                          sync: {
                            enabled: false
                          },
                          zoom: {
                            enabled: false
                          }
                        }
                      }
                    }
                  });
                  $('#difficultyChartParent').fadeIn(20);
                } else {
                  difficultyChart.data.labels = result.map(function(a) {return a.blockindex;});

                  if (difficultyChart.data.datasets.length != diffDataSets.length)
                    difficultyChart.data.datasets = diffDataSets;
                  else {
                    if (
                      (
                        difficultyChart.data.datasets[0].label.indexOf('POW') > -1 &&
                        diffDataSets[0].label.indexOf('POW') > -1
                      )
                      ||
                      (
                        difficultyChart.data.datasets[0].label.indexOf('POS') > -1 &&
                        diffDataSets[0].label.indexOf('POS') > -1
                      )
                    ) {
                      difficultyChart.data.datasets[0].data = diffDataSets[0].data;

                      if (difficultyChart.data.datasets.length == 2)
                        difficultyChart.data.datasets[1].data = diffDataSets[1].data;
                    } else
                      difficultyChart.data.datasets = diffDataSets;
                  }

                  difficultyChart.update();
                }
              }
            }
          });
        }
        $(window).resize(function () {
          if ('#{shared_pages.page_header.menu}' == 'side') {
            fixSidebar();
            positionSidebarSearch();
          } else {
            if ($(window).outerWidth() < 992)
              hideMarketDropdown();

            fixTopMenuCollapse(true);
          }
        });
        function getNetworkPanel() {
          var hashRateType='<label id="hashrate"></label>';
          return '<div class="card-header"><b>#{settings.locale.network} <span class="small fw-normal">'+getNetHashUnits()+'</span></b></div><div class="card-body"><div id="hashratePanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div><div id="hashratepanel" class="header-panel" style="display:none;"><span class="fa fa-cogs"></span>'+hashRateType+'</div></div>';
        }
        function getDifficultyPanel() {
          var difficultyType='<label id="difficulty"></label>';
          if ('#{shared_pages.difficulty}' == 'Hybrid') difficultyType+='<br /><span class="fas fa-sliders-h"></span><label id="difficultyHybrid"></label>';
          return '<div class="card-header"><b>#{settings.locale.difficulty}</b></div><div class="card-body"><div id="difficultyPanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div><div id="difficultypanel" class="header-panel" style="display:none;"><span class="fas fa-sliders-h"></span>'+difficultyType+'</div></div>';
        }
        function getMasternodesPanel() {
          var s = '<div class="card-header"><b>#{settings.locale.masternodecount}</b></div><div class="card-body">';
          s += '<div id="masternodePanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div><div id="masternodepanel" class="header-panel" style="display:none;">'
          s += '<label id="spnMasternodeCountOnline" data-bs-toggle="tooltip" data-bs-placement="top"><strong>&#10004;&nbsp;</strong></label>'
          s += '<label id="masternodeCountOnline" data-bs-toggle="tooltip" data-bs-placement="top"></label>'
          s += '<label>&nbsp;/&nbsp;</label>'
          s += '<label id="masternodeCountOffline" data-bs-toggle="tooltip" data-bs-placement="top"></label>'
          s += '<label id="spnMasternodeCountOffline" data-bs-toggle="tooltip" data-bs-placement="top"><strong>&nbsp;&#9888;</strong></label>'
          s += '</div></div>'
          return s;
        }
        function getCoinSupplyPanel() {
          var s='<div class="card-header"><b>#{settings.locale.ex_supply} <span class="small fw-normal">(#{coin.symbol})</span></b></div>'
          s += '<div class="card-body"><div id="supplyPanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div>';
          s += '<div id="supplypanel" class="header-panel" style="display:none;">';
          s += '<label><strong>&#9921;&nbsp;</strong></label><label id="supply"></label>'
          s += '</div></div>'
          return s;
        }
        function getPricePanel() {
          var priceType='<label id="lastPrice">-</label>';
          var s='<div class="card-header"><b>Price <span class="small fw-normal">(#{markets_page.default_exchange.trading_pair.split('/')[1]})</span></b></div>';
          s += '<div class="card-body"><div id="pricePanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div>';
          s += '<div id="pricepanel" class="header-panel" style="display:none;">';
          s += '<label><strong>&#9889;&nbsp;</strong></label><label id="lastPrice">-</label>';
          s += '</div></div>';
          return s;
        }
        function getMarketCapPanel() {
          var s='<div class="card-header"><b>Market Cap <span class="small fw-normal">(#{markets_page.default_exchange.trading_pair.split('/')[1]})</span></b></div>';
          s += '<div class="card-body"><div id="marketCapPanelLoading" class="header-panel"><i class="fa fa-spinner fa-pulse"></i></div>';
          s += '<div id="marketCapPanel" class="header-panel" style="display:none;">';
          s += '<label><strong>&#8778;&nbsp;</strong></label><label id="marketCap"></label>';
          s += '</div></div>';
          return s;
        }
        function getLogoPanel() {
          return '<img id="panel-img" src="#{logo}" alt="#{coin.name} Logo" title="#{coin.name} Logo" />';
        }
        function getActivePanel(panelName) {
          var sReturn='';
          switch (panelName) {
            case "network_panel":
              sReturn=getNetworkPanel();
              break;
            case "difficulty_panel":
              sReturn=getDifficultyPanel();
              break;
            case "masternodes_panel":
              sReturn=getMasternodesPanel();
              break;
            case "coin_supply_panel":
              sReturn=getCoinSupplyPanel();
              break;
            case "price_panel":
              sReturn=getPricePanel();
              break;
            case "market_cap_panel":
              sReturn=getMarketCapPanel();
              break;
            case "logo_panel":
              sReturn=getLogoPanel();
              break;
          }
          return sReturn;
        }
        function hideShowPanel(panelID, panelName) {
          var oPanel = document.getElementById(panelName);
          if (typeof(oPanel) != 'undefined' && oPanel != null) {
            document.getElementById(panelName).innerHTML=getActivePanel(panelID);
          }
        }
        function hideMarketDropdown() {
          if ('#{shared_pages.page_header.menu}' == 'side') {
            if ($('div#side-market-menu').hasClass('show')) {
              // close the market dropdown which was left open
              bootstrap.Dropdown.getOrCreateInstance($('li.side-market-menu > a.dropdown-toggle')).hide();
            }
          } else {
            if ($('li#markets > div.dropdown-menu').hasClass('show')) {
              // close the market dropdown which was left open
              bootstrap.Dropdown.getOrCreateInstance($('li#markets > a.dropdown-toggle')).hide();
            }
          }
        }
        $(document).on('click', 'button.btn-close', function (e) {
          e.preventDefault();

          $('.alert-dismissible').on('closed.bs.alert', function (e) {
            e.preventDefault();
          });
        });
        $(document).on('click', 'button#search-header-button', function (e) {
          if ($().tooltip)
            $('#search-header-span').tooltip('hide');
        });
        $('#search-navbar-collapse').on('shown.bs.collapse', function (e) {
        });
        $('#search-navbar-collapse').on('hidden.bs.collapse', function (e) {
        });
        if (#{showPanels} == true) {
          hideShowPanel('#{settings.panel(1, net)}', 'pnlOne');
          hideShowPanel('#{settings.panel(2, net)}', 'pnlTwo');
          hideShowPanel('#{settings.panel(3, net)}', 'pnlThree');
          hideShowPanel('#{settings.panel(4, net)}', 'pnlFour');
          hideShowPanel('#{settings.panel(5, net)}', 'pnlFive');
          hideShowPanel('#{settings.panel(6, net)}', 'pnlSix');
        }
        if ('#{shared_pages.page_header.menu}' == 'side') {
          function positionSidebarSearch() {
            if (#{search_enabled} == true && '#{shared_pages.page_header.search.position.toString().toLowerCase()}' == 'inside-header') {
              if ($(window).outerWidth() < 992) {
                if ($('div#inner-header-side > div.container > div#search-navbar-collapse').length)
                  $('div#search-navbar-collapse').addClass('collapse').removeClass('flexGrow1').appendTo('header#main-header-side');
              } else {
                if ($('header#main-header-side > div#search-navbar-collapse').length)
                  $('div#search-navbar-collapse').addClass('flexGrow1').removeClass('collapse').appendTo('div#inner-header-side > div.container');
              }
            }
          }
          function fixSideBarTop() {
            if ('#{shared_pages.page_header.sticky_header}' == 'true') {
              if ($(window).outerWidth() < 992)
                $('div#side-nav-bar').css('margin-top', '');
              else
                $('div#side-nav-bar').css('margin-top', $('header#main-header-side').outerHeight(true).toString() + 'px');
            } else
              $('div#side-nav-bar').css('margin-top', '0');
          }
          function fixSidebar() {
            if ($(window).outerWidth() < 992) {
              if ($('div#side-nav-bar').hasClass('show-menu'))
                toggleSideMenu();

              if ($('div#body-container > div#side-nav-bar').length > 0) {
                let hasScrollbar = false;
                $('#side-nav-bar li.nav-item > a.nav-link > span:last-child').show();
                $('nav.side-nav').css('overflow', 'visible');
                $('div#side-nav-bar').removeClass(sideBarClasses);

                if ($('div#side-offcanvas > div.offcanvas-body div.os-content').length > 0) {
                  $('div#body-container > div#side-nav-bar').appendTo('div#side-offcanvas > div.offcanvas-body div.os-content');
                  hasScrollbar = true;
                } else
                  $('div#body-container > div#side-nav-bar').appendTo('div#side-offcanvas > div.offcanvas-body');

                hideMarketDropdown();
                $('div#side-header-toggle').attr('data-bs-toggle', 'offcanvas').attr('data-bs-target', '#side-offcanvas').attr('aria-controls', 'side-offcanvas');
                if ($().tooltip)
                  $('nav.side-nav li.nav-item').tooltip('disable');
                $('li.side-market-menu').removeClass('dropend').addClass('dropdown');
                $('li.side-market-menu > a.nav-link').attr('data-bs-toggle', 'collapse').attr('data-bs-target', '#side-market-menu').attr('aria-controls', '#side-market-menu').attr('aria-expanded', 'false');
                $('div#side-market-menu').removeClass('dropdown-menu dropdown-menu-dark').addClass('collapse');

                if (!hasScrollbar)
                  $('div#side-offcanvas > div.offcanvas-body').overlayScrollbars({overflowBehavior: {x: 'hidden'}});

                fixSidebarHeight();
              }
            } else {
              if ($('div#side-offcanvas > div.offcanvas-body div#side-nav-bar').length > 0) {
                if ($('div#side-market-menu').hasClass('show')) {
                  // close the market collapse which was left open
                  bootstrap.Collapse.getOrCreateInstance($('#side-market-menu')).hide();
                }

                if ($('div#side-offcanvas').hasClass('show')) {
                  // close the offcanvas side-menu which was left open
                  bootstrap.Offcanvas.getOrCreateInstance($('div#side-offcanvas')).hide();
                }

                resetSideBarWidth();
                $('#side-nav-bar li.nav-item > a.nav-link > span:last-child').hide();
                $('div#side-nav-bar').addClass(sideBarClasses);
                $('div#side-offcanvas > div.offcanvas-body div#side-nav-bar').prependTo('div#body-container');
                $('div#side-header-toggle').removeAttr('data-bs-toggle').removeAttr('data-bs-target').removeAttr('aria-controls');
                if ($().tooltip)
                  $('nav.side-nav li.nav-item').tooltip('enable');
                $('li.side-market-menu').removeClass('dropdown').addClass('dropend');
                $('li.side-market-menu > a.nav-link').removeAttr('data-bs-toggle').removeAttr('data-bs-target').removeAttr('aria-controls').removeAttr('aria-expanded');
                $('div#side-market-menu').removeClass('collapse').addClass('dropdown-menu dropdown-menu-dark');
                fixSidebarHeight();
              }
            }

            fixSideBarTop();
          }
          function toggleSideMenu() {
            if (!$('div#side-nav-bar').hasClass('activating')) {
              $('div#side-nav-bar').toggleClass('activating');
              $('div#side-nav-bar').toggleClass('show-menu');
              var showMenu = $('div#side-nav-bar').hasClass('show-menu');
              $('div#side-header-toggle > span').toggleClass('fas far fa-window-close fa-bars').attr('data-bs-original-title', (showMenu ? 'Shrink Menu' : 'Expand Menu')).attr('alt', (showMenu ? 'Shrink Menu' : 'Expand Menu'));
              hideMarketDropdown();

              if ($().tooltip) {
                $('div#side-header-toggle > span').tooltip('hide');
                $('nav.side-nav li.nav-item').tooltip((showMenu ? 'disable' : 'enable'));
              }

              $('nav.side-nav').css('overflow', 'hidden');

              if (showMenu)
                $('#side-nav-bar li.nav-item > a.nav-link > span:last-child').show();

              // wait for the side bar to reach the desired width
              var sideBarActivateSetIntervalID = setInterval(function() {
                // check if the side bar has reached the full width or menu has been activated before finish
                if (
                  (showMenu && $('div#side-nav-bar').outerWidth() >= 224) ||
                  (!showMenu && $('div#side-nav-bar').outerWidth() <= 68) ||
                  (showMenu != $('div#side-nav-bar').hasClass('show-menu'))
                ) {
                  // stop setInterval from running again
                  clearInterval(sideBarActivateSetIntervalID);
                  $('div#side-nav-bar').toggleClass('activating');

                  if (!showMenu)
                    $('#side-nav-bar li.nav-item > a.nav-link > span:last-child').hide();

                  $('nav.side-nav').css('overflow', 'visible');

                  // programatically call the resize event
                  $(window).trigger('resize');
                }
              }, 1, "tmrWaitActivateSideMenu");
            }
          }
          function resetSideBarWidth() {
            $('div#side-offcanvas').css('width', '');
            $('div#side-nav-bar').css('width', '');
          }
          $(document).on('click', 'div#side-header-toggle', function(e) {
            if ($(window).outerWidth() >= 992)
              toggleSideMenu();
            else if ($().tooltip)
              $('div#side-header-toggle > span').tooltip('hide');
          });
          $(document).on('click', 'li#sidebar-offcanvas-close > a.nav-link', function(e) {
            e.preventDefault();

            if ($().tooltip)
              $('li#sidebar-offcanvas-close > a.nav-link').tooltip('hide');
          });
          $(document).on('click', 'li.side-market-menu', function(e) {
            if ($().tooltip && !$('#side-nav-bar').hasClass('show-menu') && $(window).outerWidth() >= 992)
              $('nav.side-nav li#markets.nav-item').tooltip('hide');
          });
          $(document).on('click', 'li.side-market-menu > a.dropdown-toggle', function(e) {
            e.preventDefault();

            if ($('div#body-container > div#side-nav-bar').length > 0) {
              // manually set the positon of the market dropdown since botostrap disables popper when called from within a .navbar
              $('#side-market-menu').css({
                'position': 'absolute',
                'inset': 'auto auto 0px 0px',
                'margin': '0px',
                'transform': 'translate3d(' + e.pageX.toString() + 'px, 30px, 0px)'
              });

              // programatically trigger the dropdown since controlling bs dropdowns via data attributes has some unintended consequences of
              // keeping the popper attributes around too long in specific scenarios when changing screen size and the dropdown is left open
              bootstrap.Dropdown.getOrCreateInstance($('li.side-market-menu > a.dropdown-toggle')).toggle();
            } else {
              if ($('li.side-market-menu > a.dropdown-toggle[aria-expanded="true"]').length > 0) {
                const sideBarWidth = 226;
                const normalItemWidth = 192;
                const firstItem = $('div#side-market-menu > a.dropdown-item').first();
                const leftRightPadding = (firstItem == null ? 0 : parseFloat(firstItem.css('padding-right').replace('px', '')) + parseFloat(firstItem.css('margin-right').replace('px', ''))) * 2;
                let largestItemWidth = 0;

                // find the largest market item to see if the sidebar should be expanded even wider
                $('div#side-market-menu > a.dropdown-item').each(function () {
                  let currentItemWidth = $(this).find('> img').outerWidth(true) + $(this).find('> span').outerWidth(true);
                  largestItemWidth = (currentItemWidth > largestItemWidth ? currentItemWidth : largestItemWidth);
                });

                if (largestItemWidth > (normalItemWidth - leftRightPadding)) {
                  $('div#side-offcanvas').css('width', (sideBarWidth + largestItemWidth - (normalItemWidth - leftRightPadding)).toString() + 'px');
                  $('div#side-nav-bar').css('width', 'auto');
                } else
                  resetSideBarWidth();
              } else
                resetSideBarWidth();
            }
          });
          /* Add a click event for the whole document when markets are enabled to emulate the autoClose feature which doesn't work when controlling bootstrap dropdowns via javascript */
          if (markets_page.enabled == true && markets_page.show_market_dropdown_menu == true && #{settings.market_count[net]} > 1) {
            $(document).on('click', function(e) {
              if (sideMarketVisible)
                bootstrap.Dropdown.getOrCreateInstance($('li.side-market-menu > a.dropdown-toggle')).hide();
            });
            $('li.side-market-menu > a.dropdown-toggle').on('shown.bs.dropdown', function (e) {
              if ($().tooltip)
                $('li#markets.nav-item').tooltip('disable');

              // wait a tick before upating the sideMarketVisible value
              setTimeout(function() {
                sideMarketVisible = true;
              }, 1);
            });
            $('li.side-market-menu > a.dropdown-toggle').on('hidden.bs.dropdown', function (e) {
              sideMarketVisible = false;

              if ($().tooltip && !$('div#side-nav-bar').hasClass('show-menu'))
                $('li#markets.nav-item').tooltip('enable');

              $('#side-market-menu').css({
                'position': '',
                'inset': '',
                'margin': '',
                'transform': ''
              });
            });
          }
          fixSidebar();
          positionSidebarSearch();
        } else {
          $('#navbar-collapse').on('show.bs.collapse', function (e) {
            topMenuExpanded = true;
            fixTopMenuCollapse(false);
          });
          $('#navbar-collapse').on('shown.bs.collapse', function (e) {
            // initialize the scrollbar only after the navbar collapse has finished since it goes too slow if initialized before
            $('#navbar-collapse').overlayScrollbars({});
          });
          $('#navbar-collapse').on('hide.bs.collapse', function (e) {
            topMenuExpanded = false;
            fixTopMenuCollapse(false);
            OverlayScrollbars($('#navbar-collapse')[0], {}).destroy();
          });
          $('#navbar-collapse').on('hidden.bs.collapse', function (e) {
            $('#search-header-button').show();
            $('#search-navbar-collapse').removeClass('d-none');
          });
        }
        setInterval(function() {
          update_stats();
        }, #{index_page.refresh_interval} || 60000);
        if (#{network_history.enabled} == true && ((#{showNethashChart} == true && #{nethash_enabled} == true && #{shared_pages.show_hashrate} == true) || (#{showDifficultyChart} == true && #{difficulty_enabled} == true))) {
          var setting_reload_chart_seconds = #{shared_pages.page_header.network_charts.reload_chart_seconds};
          if (setting_reload_chart_seconds > 0) {
            setInterval(function() {
              update_network_charts();
            }, (setting_reload_chart_seconds * 1000));
          }
          update_network_charts();
        }
        update_stats();
        enableTooltips();
      });
    - var bodyClasses = [];
    - var bodyContainerClasses = [];
    - var mainContainerClasses = [];
    - var mainContainerChildClasses = [];
    if shared_pages.page_header.menu == 'side'
      - bodyContainerClasses.push('transition05s');
      - bodyContainerClasses.push('displayFlex');
      - bodyClasses.push('transition05s');
      - mainContainerClasses.push('flexGrow1');
      - mainContainerClasses.push('width1');
      - mainContainerChildClasses.push('container');
      if shared_pages.page_header.sticky_header == true
        - mainContainerChildClasses.push('marginTop80');
      else
        - mainContainerChildClasses.push('marginTop20');
    else
      - bodyContainerClasses.push('container');
      if shared_pages.page_header.sticky_header == true
        - bodyContainerClasses.push('marginTop80');
      else
        - bodyContainerClasses.push('marginTop20');
  body(class=bodyClasses)
    - var headerClasses = ['bg-primary', 'navbar-dark'];
    - var footerClasses = ['nav','navbar','navbar-default', 'd-flex', 'footer', 'bg-primary', 'navbar-dark'];
    - var dropdownClasses = ['dropdown-menu', 'bg-primary', 'dropdown-menu-dark'];
    if shared_pages.page_header.sticky_header == true
      - headerClasses.push('fixed-top');
    if shared_pages.page_footer.sticky_footer == true
      - footerClasses.push('fixed-bottom');
    if shared_pages.page_header.menu == 'top'
      div#main-header.navbar(class=headerClasses)
        div.navbar.navbar-expand-lg(style=shared_pages.page_header.home_link == 'logo' ? 'padding-left:0;' : '')
          div.container
            .navbar-header
              span#navbar-toggler-span(alt='Toggle Menu', title='Toggle Menu', data-bs-toggle='tooltip', data-bs-placement='left')
                button.navbar-light.navbar-toggler(type='button', data-bs-toggle='collapse', data-bs-target='#navbar-collapse', aria-controls='navbar-collapse', aria-expanded='false', aria-label='Toggle navigation')
                  span#navbar-toggler-txt &#x2261;
            if shared_pages.page_header.home_link == 'title'
              a.navbar-brand(href=home_url, style='order:-1;') #{home_title}
            else if shared_pages.page_header.home_link == 'coin'
              a.navbar-brand(href=home_url, style='order:-1;') #{coin.name}
            else if shared_pages.page_header.home_link == 'logo'
              a(href=home_url, alt=coin.name + ' Home', title=coin.name + ' Home', style='order:-1;', data-bs-toggle='tooltip', data-bs-placement='bottom')
                img.logo-main(src=(logo_title), style='margin:0;max-height:' + shared_pages.page_header.home_link_logo_height + 'px;')
            .collapse.navbar-collapse(id='navbar-collapse')
              ul.navbar-nav(style='width:100%;')
                if index_page.enabled == true
                  li#home.nav-item
                    a.nav-link(href='/' + net)
                      span.x
                      span.margin-left-5 #{settings.locale.menu_explorer}
                if markets_page.enabled == true
                  if markets_page.show_market_dropdown_menu == true && settings.market_count[net] > 1
                    li#markets.dropdown.nav-item
                      a.nav-link.dropdown-toggle(data-bs-toggle='dropdown', href='#')
                        span.fas.fa-chart-line
                        span.margin-left-5 #{settings.locale.menu_markets}
                      div.navbar(class=dropdownClasses)
                        if settings.market_data[net]
                          each mkt in settings.market_data[net]
                            if mkt != null && mkt.id != null
                              each pair in mkt.trading_pairs
                                a.dropdown-item(href='/markets/' + mkt.id + '/' + pair.pair)
                                  if mkt.logo != null && mkt.logo != ''
                                    img.market-logo(src='data:image/png;base64,' + mkt.logo, title=mkt.name + ' (' + pair.pair + ')', alt=mkt.name + ' (' + pair.pair + ')')
                                  else
                                    i.market-logo.fas.fa-question-circle
                                  span #{mkt.name}
                                    span.small.fw-normal  (#{pair.pair})
                  else
                    li#markets.nav-item
                      a.nav-link(href='/markets/' + markets_page.default_exchange.exchange_name + '/' + markets_page.default_exchange.trading_pair + '/' + net)
                        span.markets
                        span.margin-left-5 #{settings.locale.menu_markets}
                if settings.blockchain_specific.heavycoin.enabled == true && settings.blockchain_specific.heavycoin.reward_page.enabled == true
                  li#reward.nav-item
                    a.nav-link(href='/reward/' + net)
                      span.fa.fa-star
                      span.margin-left-5 #{settings.locale.menu_reward}
                if info_page.enabled == true
                  li#info.nav-item
                    a.nav-link(href='/info/' + net)
                      span.info
                      span.margin-left-5 #{settings.locale.menu_info}
                if assets_page.enabled == true
                  li#info.nav-item
                    a.nav-link(href='/assets/' + net)
                      span.info
                      span.margin-left-5 #{settings.locale.menu_assets}
                if masternodes_page.enabled == true
                  li#masternodes.nav-item
                    a.nav-link(href='/masternodes/' + net)
                      span.smartnodes
                      span.margin-left-5 #{settings.locale.menu_masternodes}
                if movement_page.enabled == true
                  li#movement.nav-item
                    a.nav-link(href='/movement/' + net)
                      span.movement
                      span.margin-left-5 #{settings.locale.menu_movement}
                if network_page.enabled == true
                  li#network.nav-item
                    a.nav-link(href='/network/' + net)
                      span.network
                      span.margin-left-5 #{settings.locale.menu_network}
                if richlist_page.enabled == true
                  li#richlist.nav-item
                    a.nav-link(href='/richlist/' + net)
                      span.richlist
                      span.margin-left-5 #{settings.locale.menu_richlist}
                if api_page.enabled == true
                  li#apidocs.nav-item
                    a.nav-link(href='/apidocs/' + net)
                      span.api
                      span.margin-left-5 #{settings.locale.menu_api}
                if claim_address_page.show_header_menu == true && claim_address_page.enabled == true
                  li#claim-address.nav-item
                    a.nav-link(href='/claim/' + net)
                      span.claim
                      span.margin-left-5 #{settings.locale.menu_claim_address}
                if registration_page.enabled == true && registration_page.linked == true
                  li#register.nav-item
                    a.nav-link(href='/register/' + net)
                      span.register
                      span.margin-left-5 #{settings.locale.menu_register}
                if login_page.enabled == true && login_page.linked == true
                  li#register.nav-item
                    a.nav-link(href='/login/' + net)
                      span.register
                      span.margin-left-5 #{settings.locale.menu_login}
                if user_page.enabled == true && user_page.linked == true
                  li#user.nav-item
                    a.nav-link(href='/user/' + net)
                      span.user
                      span.margin-left-5 #{settings.locale.menu_user}
                if shared_pages.page_header.menu_show_user_ip == true 
                  li#your-ip.nav-item 
                    span#your_ip.nav-link [Your IP #{remoteIp}]
            if search_enabled == true && shared_pages.page_header.search.position.toString().toLowerCase() == 'inside-header'
              span#search-header-span(alt='Search', title='Search', data-bs-toggle='tooltip', data-bs-placement='left')
                button#search-header-button(data-bs-toggle='collapse', data-bs-target='#search-navbar-collapse')
                  span &#9740;
        if search_enabled == true && shared_pages.page_header.search.position.toString().toLowerCase() == 'inside-header'
          div#search-navbar-collapse.collapse
            div.navbar-nav.align-items-lg-center.search-box-custom(style='width:100%;')
              form.form-inline.col-12.d-flex.justify-content-center(method='post', action='/search/' + net)
                div.input-group.input-group-md.search-for(style='width:100%;')
                  input.form-control(type='text', name='search', placeholder=settings.locale.ex_search_message)
                  button.btn.btn-success.btn-sm(type='submit') #{settings.locale.ex_search_button}
    else
      header#main-header-side.side-header.navbar(class=headerClasses)
        div#inner-header-side.navbar.navbar-expand-lg
          div.container
            if shared_pages.page_header.home_link == 'title'
              a.navbar-brand.nav-link(href='/', style='order:-1;') #{shared_pages.page_title}
            else if shared_pages.page_header.home_link == 'coin'
              a.navbar-brand.nav-link(href='/', style='order:-1;') #{coin.name}
            else if shared_pages.page_header.home_link == 'logo'
              a(href='/', alt=coin.name + ' Home', title=coin.name + ' Home', style='order:-1;', data-bs-toggle='tooltip', data-bs-placement='bottom')
                img.logo-main(src=(logo_title), style='margin:0;max-height:' + shared_pages.page_header.home_link_logo_height + 'px;')
            div#side-header-toggle.side-header-toggle
              span.fas.fa-bars(alt='Expand Menu', title='Expand Menu', data-bs-toggle='tooltip', data-bs-placement='right')
            if search_enabled == true && shared_pages.page_header.search.position.toString().toLowerCase() == 'inside-header'
              span#search-header-span(alt='Search', title='Search', data-bs-toggle='tooltip', data-bs-placement='left')
                button#search-header-button(data-bs-toggle='collapse', data-bs-target='#search-navbar-collapse')
                  span.fas.fa-search
        if search_enabled == true && shared_pages.page_header.search.position.toString().toLowerCase() == 'inside-header'
          div#search-navbar-collapse.collapse.flexGrow1
            div.navbar-nav.align-items-lg-center.search-box-custom(style='width:100%;')
              form.form-inline.col-12.d-flex.justify-content-center(method='post', action='/search/' + net)
                div.input-group.input-group-md.search-for(style='width:100%;')
                  input.form-control(type='text', name='search', placeholder=settings.locale.ex_search_message)
                  button.btn.btn-success.btn-sm(type='submit') #{settings.locale.ex_search_button}
    div#body-container(class=bodyContainerClasses)
      if shared_pages.page_header.menu == 'side'
        div#side-nav-bar.navbar(class=sideBarClasses)
          nav.side-nav
            ul.navbar-nav
              li#sidebar-offcanvas-close.nav-item.text-end
                a.nav-link.d-inline(href='#', alt='Close Menu', title='Close Menu', data-bs-toggle='tooltip', data-bs-placement='right')
                  span.fa-2x.far.fa-window-close(type='button', data-bs-dismiss='offcanvas' aria-label='Close')
              li#home.nav-item(alt=settings.locale.menu_explorer, title=settings.locale.menu_explorer, data-bs-toggle='tooltip', data-bs-placement='right')
                a.nav-link(href='/')
                  span.nav-icon.fas.fa-cubes
                  span.margin-left-5 #{settings.locale.menu_explorer}
              if masternodes_page.enabled == true
                li#masternodes.nav-item(alt=settings.locale.menu_info, title=settings.locale.menu_info, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/info')
                    span.nav-icon.fa.fa-info-circle
                    span.margin-left-5 #{settings.locale.menu_info}
              if settings.blockchain_specific.heavycoin.enabled == true && settings.blockchain_specific.heavycoin.reward_page.enabled == true
                li#reward.nav-item(alt=settings.locale.menu_reward, title=settings.locale.menu_reward, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/reward')
                    span.nav-icon.fa.fa-star
                    span.margin-left-5 #{settings.locale.menu_reward}
              if masternodes_page.enabled == true
                li#masternodes.nav-item(alt=settings.locale.menu_masternodes, title=settings.locale.menu_masternodes, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/masternodes')
                    span.nav-icon.fa.fa-share-alt
                    span.margin-left-5 #{settings.locale.menu_masternodes}
              if movement_page.enabled == true
                li#movement.nav-item(alt=settings.locale.menu_movement, title=settings.locale.menu_movement, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/movement')
                    span.nav-icon.far.fa-money-bill-alt
                    span.margin-left-5 #{settings.locale.menu_movement}
              if network_page.enabled == true
                li#network.nav-item(alt=settings.locale.menu_network, title=settings.locale.menu_network, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/network')
                    span.nav-icon.fas.fa-network-wired
                    span.margin-left-5 #{settings.locale.menu_network}
              if richlist_page.enabled == true
                li#richlist.nav-item(alt=settings.locale.menu_richlist, title=settings.locale.menu_richlist, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/richlist')
                    span.nav-icon.fab.fa-btc
                    span.margin-left-5 #{settings.locale.menu_richlist}
              if markets_page.enabled == true
                if markets_page.show_market_dropdown_menu == true && settings.market_count[net] > 1
                  li#markets.dropend.nav-item.side-market-menu(alt=settings.locale.menu_markets, title=settings.locale.menu_markets, data-bs-toggle='tooltip', data-bs-placement='right')
                    a.nav-link.dropdown-toggle(href='#')
                      span.nav-icon.fas.fa-chart-line
                      span.margin-left-5 #{settings.locale.menu_markets}
                    div#side-market-menu.navbar(class=dropdownClasses)
                      if settings.market_data[net]
                        each mkt in settings.market_data[net]
                          if mkt != null && mkt.id != null
                            each pair in mkt.trading_pairs
                              a.dropdown-item(href='/markets/' + mkt.id + '/' + pair.pair)
                                if mkt.logo != null && mkt.logo != ''
                                  img.market-logo(src='data:image/png;base64,' + mkt.logo, title=mkt.name + ' (' + pair.pair + ')', alt=mkt.name + ' (' + pair.pair + ')')
                                else
                                  i.market-logo.fas.fa-question-circle
                                span #{mkt.name}
                                  span.small.fw-normal  (#{pair.pair})
                else
                  li#markets.nav-item(alt=settings.locale.menu_markets, title=settings.locale.menu_markets, data-bs-toggle='tooltip', data-bs-placement='right')
                    a.nav-link(href='/markets/' + markets_page.default_exchange.exchange_name + '/' + markets_page.default_exchange.trading_pair)
                      span.nav-icon.fas.fa-chart-line
                      span.margin-left-5 #{settings.locale.menu_markets}
              if api_page.enabled == true
                li#apidocs.nav-item(alt=settings.locale.menu_api, title=settings.locale.menu_api, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/apidocs')
                    span.nav-icon.fa.fa-info-circle
                    span.margin-left-5 #{settings.locale.menu_api}
              if claim_address_page.show_header_menu == true && claim_address_page.enabled == true
                li#claim-address.nav-item(alt=settings.locale.menu_claim_address, title=settings.locale.menu_claim_address, data-bs-toggle='tooltip', data-bs-placement='right')
                  a.nav-link(href='/claim')
                    span.nav-icon.far.fa-address-card
                    span.margin-left-5 #{settings.locale.menu_claim_address}
        div#side-offcanvas.offcanvas.offcanvas-start(tabindex='-1')
          div.offcanvas-body.d-block.navbar(class=sideBarClasses)
      if shared_pages.links.length > 0 && shared_pages.links_position == 'top'
        div#links.container
          each link in shared_pages.links
            a.social-link.border-0(href=link.url, target='_blank', alt=coin.name + ' ' + link.tooltip_text, title=coin.name + ' ' + link.tooltip_text, data-bs-toggle='tooltip', data-bs-placement='top')
              if link.icon != null && link.icon != ''
                span(class='vertical-align-middle ' + link.icon)
              if link.image_path != null && link.image_path != ''
                img(class='vertical-align-middle', src=link.image_path)
              span #{link.text}
      div#main-container(class=mainContainerClasses)
        div#main-child-container(class=mainContainerChildClasses)
          if showSync != null && showSync == true
            .col-lg-12
              .alert.alert-warning
                .cardSpacer
                  span.fas.fa-exclamation-triangle(style='margin-right:5px;')
                  strong #{settings.locale.ex_warning}
                div #{settings.locale.initial_index_alert}
          if (showPanels == true && showPanelsPosition == 'top') || (search_enabled == true && shared_pages.page_header.search.position == 'below-header')
            .col-lg-12
              if showPanels == true && showPanelsPosition == 'top'
                div#cockpit.row.text-center.d-flex.justify-content-center
                  - if (settings.panel(1, net) != '') {
                    div(class="col-lg-2 col-lg-offset-" + settings.panelOffset(net))
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlOne')
                  - }
                  - if (settings.panel(2, net) != '') {
                    .col-lg-2
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlTwo')
                  - }
                  - if (settings.panel(3, net) != '') {
                    .col-lg-2
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlThree')
                  - }
                  - if (settings.panel(4, net) != '') {
                    .col-lg-2
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFour')
                  - }
                  - if (settings.panel(5, net) != '') {
                    .col-lg-2
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFive')
                  - }
                  - if (settings.panel(6, net) != '') {
                    .col-lg-2
                      .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlSix')
                  - }
              if search_enabled == true && shared_pages.page_header.search.position == 'below-header'
                div#search-row.row.text-center
                  form.form-inline.col-12.d-flex.justify-content-center(method='post', action='/search/' + net)
                    #index-search.form-group.d-flex.justify-content-center
                      input.form-control(type='text', name='search', placeholder=settings.locale.ex_search_message, style='min-width:80%;margin-right:5px;')
                      button.btn.btn-success(type='submit') #{settings.locale.ex_search_button}
          if shared_pages.page_header.network_charts.align == 'bottom'
            block content
          if showPanels == true && showPanelsPosition == 'center'
            .col-lg-12
              div#cockpit.row.text-center.d-flex.justify-content-center
                - if (settings.panel(1, net) != '') {
                  div(class="col-lg-2 col-lg-offset-" + settings.panelOffset(net))
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlOne')
                - }
                - if (settings.panel(2, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlTwo')
                - }
                - if (settings.panel(3, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlThree')
                - }
                - if (settings.panel(4, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFour')
                - }
                - if (settings.panel(5, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFive')
                - }
                - if (settings.panel(6, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlSix')
                - }
          if network_history.enabled == true && ((showNethashChart == true && nethash_enabled == true && shared_pages.show_hashrate == true) || (showDifficultyChart == true && difficulty_enabled == true))
            .container
              .row.align-items-start
                - var chartColumnClass = 'col-lg-12';
                if showNethashChart == true && nethash_enabled == true && shared_pages.show_hashrate == true && showDifficultyChart == true && difficulty_enabled == true
                  - chartColumnClass = 'col-lg-6';
                if showNethashChart == true && nethash_enabled == true && shared_pages.show_hashrate == true
                  div#nethashChartParent(class=chartColumnClass, style='display:none;margin:10px 0;')
                    .card.card-default.border-0
                      .card-header
                        strong Network Hashrate
                      .card-body(style='padding:0.2rem;')
                        canvas#nethashChart(style='max-height:300px;')
                      if isMultiAlgo
                        .card-footer(id='hashChartFooter')
                          button(onclick='hashonlycpu()') CPU
                          button(onclick='hashonlygpu()') GPU
                          button(onclick='hashonlyasic()') ASIC
                if showDifficultyChart == true && difficulty_enabled == true
                  div#difficultyChartParent(class=chartColumnClass, style='display:none;margin:10px 0;')
                    .card.card-default.border-0
                      .card-header
                        strong Proof of work (PoW) Difficulty
                      .card-body(style='padding:0.2rem;')
                        canvas#difficultyChart(style='max-height:300px;')
                      if isMultiAlgo
                        .card-footer(id="difficultyChartFooter")
                          button(onclick='diffonlycpu()') CPU
                          button(onclick='diffonlygpu()') GPU
                          button(onclick='diffonlyasic()') ASIC
          if shared_pages.page_header.network_charts.align == 'top'
            block content
          if showPanels == true && showPanelsPosition == 'bottom'
            .col-lg-12
              div#cockpit.row.text-center.d-flex.justify-content-center
                - if (settings.panel(1, net) != '') {
                  div(class="col-lg-2 col-lg-offset-" + settings.panelOffset(net))
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlOne')
                - }
                - if (settings.panel(2, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlTwo')
                - }
                - if (settings.panel(3, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlThree')
                - }
                - if (settings.panel(4, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFour')
                - }
                - if (settings.panel(5, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlFive')
                - }
                - if (settings.panel(6, net) != '') {
                  .col-lg-2
                    .card.card-default.border-0.d-lg-block.d-block.cardSpacer(id='pnlSix')
                - }
      if shared_pages.links.length > 0 && shared_pages.links_position == 'bottom'
        div#links.container
          each link in shared_pages.links
            a.social-link.border-0(href=link.url, target='_blank', alt=coin.name + ' ' + link.tooltip_text, title=coin.name + ' ' + link.tooltip_text, data-bs-toggle='tooltip', data-bs-placement='top')
              if link.icon != null && link.icon != ''
                span(class='vertical-align-middle ' + link.icon)
              if link.image_path != null && link.image_path != ''
                img(class='vertical-align-middle', src=link.image_path)
              span #{link.text}
    footer
      div#social
        each social in shared_pages.page_footer.social_links
          if social.enabled
            a.social-link.border-0(href=social.url, target='_blank', alt=coin.name + ' ' + social.tooltip_text, title=coin.name + ' ' + social.tooltip_text, data-bs-toggle='tooltip', data-bs-placement='top')
              if social.icon != null && social.icon != ''
                span(class='vertical-align-middle ' + social.icon)
              else
                img(class='vertical-align-middle', src=social.image_path)
      div#copy
        p
          small #{shared_pages.page_footer.copy_text}
        div#version 
          small #{settings.app_name} - #{settings.app_version}
// .col-4.navbar-nav
        ui.nav.justify-content-end
          label#lblBlockcount.badge.nav-link.border-0.float-end
          // label#lblConnections.badge.nav-link.border-0.float-end