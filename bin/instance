#!/usr/bin/env node
const debug = require('debug')('debug')
const settings = require('../lib/settings')
const detect = require('detect-port')
const db = require('../lib/database')
const app = require('../app')

const networks = settings.getAllNet()

app.set('port', process.env.PORT || settings.webserver.port)

// init db for default chain (must be present and cannot be disabled)
db.connection_factory(networks[0], true, settings.getDbConnectionString(networks[0]), function(conn) {
  db.initialize_data_startup(function() {
    const port = app.get('port')
    // launch server if only one chain available.
    if (networks.length == 1) {
      detectPortAndLaunchServer(port)
    }
    // init db for 1+n chain(s) and launch server after it.
    networks.forEach( function(item, index) {
      if (index > 0) {
        const enabled = settings.getDbOrNull(item).enabled
        if (enabled) {
          db.connection_factory(item, true, settings.getDbConnectionString(networks[index]), function(conn) {
            db.initialize_data_startup(function() {
              if (index == networks.length -1) {
                detectPortAndLaunchServer(port)
              }
            }, item)
          })
        }
      }
    })
  }, networks[0])
})

function detectPortAndLaunchServer(port) {
  detect(port).then(result => {
    console.log('Detected port %s.', result)
    if (port !== result -1) {
      console.log('Starting...')
      const server = app.listen(port, '::', function() {
        console.log('\n*** but-x listening on port %d ***\n', server.address().port)
      })
      process.on('SIGINT', () => {
        console.log('Stopping...')
        server.close(() => {
          const mongoose = require('mongoose')
          mongoose.connection.close(false).then(() => {
            // close the main process now that all http and database connections have closed
            console.log('Exit...')
            process.exit(0)
          }).catch((err) => {
            console.log(err)
            process.exit(1)
          })
        })
      })
    }
  })
}

module.exports = {
  db: db
}